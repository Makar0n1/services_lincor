import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import dotenv from 'dotenv';

import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { initDatabase } from './config/database';
import { connectRedis } from './config/redis';
import { EmailService } from './services/emailService';
import { GoogleSheetsService } from './services/googleSheetsService';
import { SchedulerService } from './services/schedulerService';
import { QueueService } from './services/queueService';

// –ò–º–ø–æ—Ä—Ç middleware
import { requestLogger, errorHandler } from './middleware/auth';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
import authRoutes from './routes/auth';
import projectRoutes from './routes/projects';
import manualLinksRoutes from './routes/manualLinks';
import googleSheetsRoutes from './routes/googleSheets';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
dotenv.config({ path: '../../.env' });

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env['FRONTEND_URL'] || "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env['PORT'] || 3000;



// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
    },
  },
}));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: process.env['FRONTEND_URL'] || "http://localhost:3000",
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));

// –°–∂–∞—Ç–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
app.use(compression());

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger);

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/uploads', express.static('uploads'));
app.use('/test', express.static('public'));

// Root endpoint - redirect to test page
app.get('/', (_req, res) => {
  res.redirect('/test/test.html');
});

// Health check endpoint
app.get('/health', (_req, res) => {
  res.status(200).json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env['NODE_ENV'] || 'development'
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/projects', projectRoutes);
app.use('/api/projects', manualLinksRoutes);
app.use('/api/projects', googleSheetsRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (_req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('subscribe_project', (data) => {
    const { projectId } = data;
    socket.join(`project_${projectId}`);
    console.log(`Client ${socket.id} subscribed to project ${projectId}`);
  });

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('unsubscribe_project', (data) => {
    const { projectId } = data;
    socket.leave(`project_${projectId}`);
    console.log(`Client ${socket.id} unsubscribed from project ${projectId}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// –≠–∫—Å–ø–æ—Ä—Ç io –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { io };

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('Initializing database...');
    await initDatabase();
    console.log('Database initialized successfully');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    console.log('Connecting to Redis...');
    await connectRedis();
    console.log('Redis connected successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email —Å–µ—Ä–≤–∏—Å–∞
    console.log('Initializing Email service...');
    await EmailService.initialize();
    console.log('Email service initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å–µ—Ä–≤–∏—Å–∞
    console.log('Initializing Google Sheets service...');
    await GoogleSheetsService.initialize();
    console.log('Google Sheets service initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    console.log('Initializing Scheduler service...');
    await SchedulerService.initialize();
    console.log('Scheduler service initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–µ–π
    console.log('Initializing Queue service...');
    await QueueService.initialize();
    console.log('Queue service initialized successfully');

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
      console.log(`üìä Environment: ${process.env['NODE_ENV'] || 'development'}`);
      console.log(`üîó API URL: http://localhost:${PORT}/api`);
      console.log(`üè• Health check: http://localhost:${PORT}/health`);
    });

  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGTERM', async () => {
  console.log('SIGTERM received, shutting down gracefully');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
  await SchedulerService.shutdown();
  await QueueService.shutdown();
  
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

process.on('SIGINT', async () => {
  console.log('SIGINT received, shutting down gracefully');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
  await SchedulerService.shutdown();
  await QueueService.shutdown();
  
  server.close(() => {
    console.log('Server closed');
    process.exit(0);
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();
