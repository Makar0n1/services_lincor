import dotenv from 'dotenv';
import { initDatabase } from './config/database';
import { connectRedis } from './config/redis';
import { BullMQService } from './services/bullmqService';
import { LinkAnalyzer } from './services/linkAnalyzer';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '../../.env' });

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Worker
async function startWorker() {
  try {
    console.log('üë∑ Starting Link Analysis Worker...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä Initializing database...');
    await initDatabase();
    console.log('‚úÖ Database initialized successfully');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    console.log('üî¥ Connecting to Redis...');
    await connectRedis();
    console.log('‚úÖ Redis connected successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Link Analyzer
    console.log('üîç Initializing Link Analyzer...');
    await LinkAnalyzer.initialize();
    console.log('‚úÖ Link Analyzer initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BullMQ Service
    console.log('üìã Initializing BullMQ Service...');
    await BullMQService.initialize();
    console.log('‚úÖ BullMQ Service initialized successfully');

    console.log('üöÄ Worker is ready to process link analysis tasks!');
    console.log(`‚öôÔ∏è  Worker configuration:`);
    console.log(`   - Concurrent links: ${process.env['WORKER_CONCURRENT_LINKS'] || '5'}`);
    console.log(`   - Browser instances: ${process.env['WORKER_BROWSER_INSTANCES'] || '5'}`);
    console.log(`   - Queue processing interval: ${process.env['WORKER_QUEUE_PROCESSING_INTERVAL'] || '1000'}ms`);

    // Graceful shutdown
    process.on('SIGTERM', async () => {
      console.log('üõë SIGTERM received, shutting down worker gracefully...');
      await BullMQService.shutdown();
      await LinkAnalyzer.close();
      console.log('‚úÖ Worker shut down successfully');
      process.exit(0);
    });

    process.on('SIGINT', async () => {
      console.log('üõë SIGINT received, shutting down worker gracefully...');
      await BullMQService.shutdown();
      await LinkAnalyzer.close();
      console.log('‚úÖ Worker shut down successfully');
      process.exit(0);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      process.exit(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      process.exit(1);
    });

  } catch (error) {
    console.error('‚ùå Failed to start Worker:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ Worker
startWorker();
