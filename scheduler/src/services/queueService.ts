import redisClient from '../config/redis';
import { UserModel } from '../models/User';
import { ManualLinkModel } from '../models/ManualLink';
import { LinkAnalyzer } from './linkAnalyzer';
import { SocketService } from './socketService';

export interface QueueItem {
  id: string;
  type: 'manual' | 'google_sheets';
  userId: string;
  projectId: string;
  linkId?: string | undefined;
  sheetId?: string | undefined;
  url: string;
  targetDomain: string;
  priority: number; // 1 = highest (enterprise), 4 = lowest (free)
  createdAt: Date;
  attempts: number;
  maxAttempts: number;
}

export interface AnalysisResult {
  id: string;
  type: 'manual' | 'google_sheets';
  userId: string;
  projectId: string;
  linkId?: string | undefined;
  sheetId?: string | undefined;
  result: any;
  success: boolean;
  error?: string;
  processedAt: Date;
}

export class QueueService {
  private static readonly PROCESSING_KEY = 'link_analysis_processing';
  private static readonly RESULTS_KEY = 'link_analysis_results';
  private static readonly PRIORITY_QUEUE_KEY = 'link_analysis_priority_queue';
  
  private static workers: Map<string, boolean> = new Map();
  private static readonly MAX_WORKERS = parseInt(process.env['WORKER_CONCURRENT_LINKS'] || '5');

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –æ—á–µ—Ä–µ–¥–µ–π (–ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≤–æ—Ä–∫–µ—Ä–∞–º–∏)
   */
  static async initialize(): Promise<void> {
    console.log('üîÑ Initializing Queue Service...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
      const ping = await redisClient.ping();
      console.log('Redis PING:', ping);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
      await this.clearProcessingQueue();
      
      console.log(`üë• Starting ${this.MAX_WORKERS} workers for link analysis`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
      for (let i = 0; i < this.MAX_WORKERS; i++) {
        this.startWorker(`worker_${i}`);
      }
      
      console.log('‚úÖ Queue Service initialized successfully');
    } catch (error) {
      console.error('‚ùå Failed to initialize Queue Service:', error);
      throw error;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ (–¥–ª—è API Gateway)
   */
  static async initializeClient(): Promise<void> {
    console.log('üîÑ Initializing Queue Service (Client Mode)...');
    
    try {
      // –í –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ—á–∏—â–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      // –≠—Ç–æ –¥–µ–ª–∞—é—Ç –≤–æ—Ä–∫–µ—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log('‚úÖ Queue Service (Client Mode) initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing Queue Service (Client Mode):', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –∞–Ω–∞–ª–∏–∑–∞
   */
  static async addToQueue(
    type: 'manual' | 'google_sheets',
    userId: string,
    projectId: string,
    url: string,
    targetDomain: string,
    linkId?: string,
    sheetId?: string
  ): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await UserModel.findById(userId);
      if (!user) {
        throw new Error(`User ${userId} not found`);
      }

      const priority = this.getUserPriority(user.subscription_plan);
      
      const queueItem: QueueItem = {
        id: `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        type,
        userId,
        projectId,
        linkId,
        sheetId,
        url,
        targetDomain,
        priority,
        createdAt: new Date(),
        attempts: 0,
        maxAttempts: 3
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å Redis
      const score = this.calculateScore(priority, queueItem.createdAt);
      const member = { score, value: JSON.stringify(queueItem) };
      const added = await redisClient.zAdd(this.PRIORITY_QUEUE_KEY, [member]);
      console.log('zAdd added count:', added);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
      const queueSize = await redisClient.zCard(this.PRIORITY_QUEUE_KEY);
      console.log(`üì• Added ${type} link to queue: ${url} (priority: ${priority}, userId: ${userId})`);
      console.log(`üìä Queue size after adding: ${queueSize}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—á–µ—Ä–µ–¥–∏
      const queueItems = await redisClient.zRange(this.PRIORITY_QUEUE_KEY, 0, -1);
      console.log(`üìã Queue items: ${queueItems.length}`, queueItems.map(item => {
        const parsed = JSON.parse(item);
        return `${parsed.type}:${parsed.url}`;
      }));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –≤—Å–µ –µ—â–µ –≤ –æ—á–µ—Ä–µ–¥–∏
      setTimeout(async () => {
        try {
          const delayedQueueSize = await redisClient.zCard(this.PRIORITY_QUEUE_KEY);
          const delayedQueueItems = await redisClient.zRange(this.PRIORITY_QUEUE_KEY, 0, -1);
          const processingSize = await redisClient.lLen(this.PROCESSING_KEY);
          const processingItems = await redisClient.lRange(this.PROCESSING_KEY, 0, -1);
          
          console.log(`‚è∞ Queue size after 1s: ${delayedQueueSize}`);
          console.log(`‚è∞ Queue items after 1s: ${delayedQueueItems.length}`, delayedQueueItems.map(item => {
            const parsed = JSON.parse(item);
            return `${parsed.type}:${parsed.url}`;
          }));
          console.log(`‚è∞ Processing size after 1s: ${processingSize}`);
          console.log(`‚è∞ Processing items after 1s: ${processingItems.length}`, processingItems.map(item => {
            const parsed = JSON.parse(item);
            return `${parsed.type}:${parsed.url}`;
          }));
        } catch (error) {
          console.error('‚ùå Error checking delayed queue:', error);
        }
      }, 1000);
      
    } catch (error) {
      console.error('‚ùå Error adding item to queue:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
   */
  private static startWorker(workerId: string): void {
    this.workers.set(workerId, true);
    
    const processQueue = async () => {
      console.log(`üë∑ Worker ${workerId} started`);
      while (this.workers.get(workerId)) {
        try {
          await this.processNextItem(workerId);
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç–æ–≤
          await new Promise(resolve => setTimeout(resolve, 100));
        } catch (error) {
          console.error(`‚ùå Worker ${workerId} error:`, error);
          await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
      }
    };

    processQueue();
    console.log(`üë∑ Worker ${workerId} started`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  private static async processNextItem(workerId: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      const result = await redisClient.zPopMax(this.PRIORITY_QUEUE_KEY);
      
      if (!result || !Array.isArray(result) || result.length === 0) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ª–æ–≥–∏
        if (Math.random() < 0.01) { // 1% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
          console.log(`üë∑ Worker ${workerId} checking queue - empty`);
        }
        return; // –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
      }

      console.log(`üéØ Worker ${workerId} FOUND TASK! Result:`, result);

      console.log(`üë∑ Worker ${workerId} got task from queue:`, result);

      const queueItem: QueueItem = JSON.parse(result[0].value as string);
      
      // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await redisClient.lPush(this.PROCESSING_KEY, JSON.stringify(queueItem));
      
      console.log(`üîÑ Worker ${workerId} processing: ${queueItem.url} (${queueItem.type})`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
      const analysisResult = await this.analyzeLink(queueItem);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await redisClient.lRem(this.PROCESSING_KEY, 1, JSON.stringify(queueItem));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      await this.saveResult(analysisResult);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await this.sendRealTimeUpdate(analysisResult);
      
      console.log(`‚úÖ Worker ${workerId} completed: ${queueItem.url}`);
      
    } catch (error) {
      console.error(`‚ùå Worker ${workerId} processing error:`, error);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏
   */
  private static async analyzeLink(queueItem: QueueItem): Promise<AnalysisResult> {
    try {
      let result: any;
      
      if (queueItem.type === 'manual') {
        // –ê–Ω–∞–ª–∏–∑ –¥–ª—è manual links
        result = await LinkAnalyzer.analyzeLink(queueItem.url, queueItem.targetDomain);
      } else {
        // –î–ª—è Google Sheets –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ GoogleSheetsService
        // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = { status: 'OK', message: 'Google Sheets analysis handled separately' };
      }
      
      return {
        id: queueItem.id,
        type: queueItem.type,
        userId: queueItem.userId,
        projectId: queueItem.projectId,
        linkId: queueItem.linkId,
        sheetId: queueItem.sheetId,
        result,
        success: true,
        processedAt: new Date()
      };
      
    } catch (error) {
      return {
        id: queueItem.id,
        type: queueItem.type,
        userId: queueItem.userId,
        projectId: queueItem.projectId,
        linkId: queueItem.linkId,
        sheetId: queueItem.sheetId,
        result: null,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        processedAt: new Date()
      };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
   */
  private static async saveResult(result: AnalysisResult): Promise<void> {
    try {
      if (result.type === 'manual' && result.linkId) {
        // –û–±–Ω–æ–≤–ª—è–µ–º manual link
        await ManualLinkModel.update(result.linkId, {
          status: result.success ? 'OK' : 'Problem',
          response_code: result.result?.responseCode,
          indexable: result.result?.indexable,
          link_type: result.result?.linkType,
          canonical_url: result.result?.canonicalUrl,
          load_time: result.result?.loadTime,
          full_a_tag: result.result?.fullATag,
          non_indexable_reason: result.result?.nonIndexableReason,
          checked_at: result.processedAt
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Redis –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
      await redisClient.lPush(this.RESULTS_KEY, JSON.stringify(result));
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
      await redisClient.lTrim(this.RESULTS_KEY, 0, 999);
      
    } catch (error) {
      console.error('‚ùå Error saving analysis result:', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  private static async sendRealTimeUpdate(result: AnalysisResult): Promise<void> {
    try {
      if (result.type === 'manual') {
        SocketService.emitToProject(result.projectId, 'link_updated', {
          projectId: result.projectId,
          linkId: result.linkId,
          status: result.success ? result.result?.status : 'Problem',
          response_code: result.result?.responseCode,
          indexable: result.result?.indexable,
          link_type: result.result?.linkType,
          canonical_url: result.result?.canonicalUrl,
          load_time: result.result?.loadTime,
          full_a_tag: result.result?.fullATag,
          non_indexable_reason: result.result?.nonIndexableReason,
          checked_at: result.processedAt
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
        await this.checkProjectAnalysisCompletion(result.projectId, 'manual');
      } else if (result.type === 'google_sheets') {
        SocketService.emitToProject(result.projectId, 'sheets_link_updated', {
          projectId: result.projectId,
          sheetId: result.sheetId,
          status: result.success ? 'OK' : 'Problem',
          message: result.success ? 'Link analyzed successfully' : result.error
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ Google Sheets
        await this.checkProjectAnalysisCompletion(result.projectId, 'google_sheets');
      }
      
    } catch (error) {
      console.error('‚ùå Error sending real-time update:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private static async checkProjectAnalysisCompletion(projectId: string, type: 'manual' | 'google_sheets'): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Å—ã–ª–∫–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const queueItems = await redisClient.zRange(this.PRIORITY_QUEUE_KEY, 0, -1);
      const processingItems = await redisClient.lRange(this.PROCESSING_KEY, 0, -1);
      
      const projectQueueItems = queueItems.filter(item => {
        const queueItem = JSON.parse(item);
        return queueItem.projectId === projectId && queueItem.type === type;
      });
      
      const projectProcessingItems = processingItems.filter(item => {
        const queueItem = JSON.parse(item);
        return queueItem.projectId === projectId && queueItem.type === type;
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      if (projectQueueItems.length === 0 && projectProcessingItems.length === 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤ –ë–î
        const { ManualLinkModel } = await import('../models/ManualLink');
        const pendingLinks = await ManualLinkModel.findByProjectIdAndType(projectId, type);
        const unprocessedLinks = pendingLinks.filter(link => 
          link.status === 'pending' || link.status === 'checking'
        );

        if (unprocessedLinks.length === 0) {
          // –í—Å–µ —Å—Å—ã–ª–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          const eventName = type === 'manual' ? 'analysis_completed' : 'sheets_analysis_completed';
          SocketService.emitToProject(projectId, eventName, {
            projectId,
            total: pendingLinks.length,
            processed: pendingLinks.length,
            message: `All ${type} links analysis completed`
          });
          
          console.log(`‚úÖ ${type} analysis completed for project ${projectId}`);
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error checking project analysis completion:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static getUserPriority(plan: string): number {
    switch (plan) {
      case 'enterprise':
        return 1; // –ù–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      case 'pro':
        return 2;
      case 'starter':
        return 3;
      case 'free':
      default:
        return 4; // –ù–∞–∏–º–µ–Ω—å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ score –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
   */
  private static calculateScore(priority: number, createdAt: Date | string): number {
    const ts = createdAt instanceof Date ? createdAt.getTime() : new Date(createdAt).getTime();
    // –ë–û–ª—å—à–∏–π score = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω—è—è –∑–∞–¥–∞—á–∞
    // priority=1 (enterprise) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—à–µ priority=4 (free)
    return -priority * 1e13 - ts;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
   */
  private static async clearProcessingQueue(): Promise<void> {
    try {
      const processingItems = await redisClient.lRange(this.PROCESSING_KEY, 0, -1);
      
      for (const item of processingItems) {
        const queueItem: QueueItem = JSON.parse(item);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        const score = this.calculateScore(queueItem.priority, queueItem.createdAt);
        const member = { score, value: item };
        await redisClient.zAdd(this.PRIORITY_QUEUE_KEY, [member]);
      }
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await redisClient.del(this.PROCESSING_KEY);
      
      console.log(`üîÑ Restored ${processingItems.length} items from processing queue`);
      
    } catch (error) {
      console.error('‚ùå Error clearing processing queue:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  static async getQueueStats(): Promise<{
    totalItems: number;
    processingItems: number;
    activeWorkers: number;
    priorityDistribution: Record<string, number>;
  }> {
    try {
      const totalItems = await redisClient.zCard(this.PRIORITY_QUEUE_KEY);
      const processingItems = await redisClient.lLen(this.PROCESSING_KEY);
      const activeWorkers = Array.from(this.workers.values()).filter(Boolean).length;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
      const priorityDistribution: Record<string, number> = {};
      const allItems = await redisClient.zRange(this.PRIORITY_QUEUE_KEY, 0, -1);
      
      for (const item of allItems) {
        const queueItem: QueueItem = JSON.parse(item);
        const priorityName = this.getPriorityName(queueItem.priority);
        priorityDistribution[priorityName] = (priorityDistribution[priorityName] || 0) + 1;
      }
      
      return {
        totalItems,
        processingItems,
        activeWorkers,
        priorityDistribution
      };
      
    } catch (error) {
      console.error('‚ùå Error getting queue stats:', error);
      return {
        totalItems: 0,
        processingItems: 0,
        activeWorkers: 0,
        priorityDistribution: {}
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –≤ –æ—á–µ—Ä–µ–¥–∏
   */
  static async getProjectQueueInfo(projectId: string): Promise<{
    queueItems: number;
    processingItems: number;
    items: Array<{
      id: string;
      type: string;
      url: string;
      priority: number;
      createdAt: string;
    }>;
  }> {
    try {
      const allQueueItems = await redisClient.zRange(this.PRIORITY_QUEUE_KEY, 0, -1);
      const allProcessingItems = await redisClient.lRange(this.PROCESSING_KEY, 0, -1);
      
      const projectQueueItems = allQueueItems.filter(item => {
        const queueItem = JSON.parse(item);
        return queueItem.projectId === projectId;
      });
      
      const projectProcessingItems = allProcessingItems.filter(item => {
        const queueItem = JSON.parse(item);
        return queueItem.projectId === projectId;
      });
      
      const items = [...projectQueueItems, ...projectProcessingItems].map(item => {
        const queueItem = JSON.parse(item);
        return {
          id: queueItem.id,
          type: queueItem.type,
          url: queueItem.url,
          priority: queueItem.priority,
          createdAt: queueItem.createdAt
        };
      });
      
      return {
        queueItems: projectQueueItems.length,
        processingItems: projectProcessingItems.length,
        items
      };
      
    } catch (error) {
      console.error('‚ùå Error getting project queue info:', error);
      return {
        queueItems: 0,
        processingItems: 0,
        items: []
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  private static getPriorityName(priority: number): string {
    switch (priority) {
      case 1: return 'enterprise';
      case 2: return 'pro';
      case 3: return 'starter';
      case 4: return 'free';
      default: return 'unknown';
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
   */
  static async shutdown(): Promise<void> {
    console.log('üõë Shutting down Queue Service...');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
    for (const workerId of this.workers.keys()) {
      this.workers.set(workerId, false);
    }
    
    this.workers.clear();
    
    console.log('‚úÖ Queue Service shutdown completed');
  }
}
