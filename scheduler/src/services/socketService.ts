import { Server as SocketIOServer } from 'socket.io';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Socket.IO
let io: SocketIOServer | null = null;

export class SocketService {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.IO —Å–µ—Ä–≤–µ—Ä–∞
  static initialize(socketServer: SocketIOServer): void {
    io = socketServer;
    console.log('‚úÖ Socket Service initialized');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Socket.IO
  static getIO(): SocketIOServer | null {
    return io;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É –ø—Ä–æ–µ–∫—Ç–∞
  static emitToProject(projectId: string, event: string, data: any): void {
    if (io) {
      io.to(`project_${projectId}`).emit(event, data);
      console.log(`üì° Emitted ${event} to project ${projectId}`);
    } else {
      console.warn('‚ö†Ô∏è Socket.IO not initialized, cannot emit event');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
  static emitToAll(event: string, data: any): void {
    if (io) {
      io.emit(event, data);
      console.log(`üì° Emitted ${event} to all clients`);
    } else {
      console.warn('‚ö†Ô∏è Socket.IO not initialized, cannot emit event');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
  static emitToClient(socketId: string, event: string, data: any): void {
    if (io) {
      io.to(socketId).emit(event, data);
      console.log(`üì° Emitted ${event} to client ${socketId}`);
    } else {
      console.warn('‚ö†Ô∏è Socket.IO not initialized, cannot emit event');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
  static getRoomSize(projectId: string): number {
    if (io) {
      const room = io.sockets.adapter.rooms.get(`project_${projectId}`);
      return room ? room.size : 0;
    }
    return 0;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  static getTotalConnections(): number {
    if (io) {
      return io.sockets.sockets.size;
    }
    return 0;
  }
}
