import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import dotenv from 'dotenv';

import { createServer } from 'http';
import { Server as SocketIOServer } from 'socket.io';

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import { initDatabase } from './config/database';
import { connectRedis } from './config/redis';
import { EmailService } from './services/emailService';
import { SocketService } from './services/socketService';
import { BullMQService } from './services/bullmqService';

// –ò–º–ø–æ—Ä—Ç middleware
import { requestLogger, errorHandler } from './middleware/auth';

// –ò–º–ø–æ—Ä—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
import authRoutes from './routes/auth';
import projectRoutes from './routes/projects';
import manualLinksRoutes from './routes/manualLinks';
import googleSheetsRoutes from './routes/googleSheets';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '../../.env' });

const app = express();
const server = createServer(app);
const io = new SocketIOServer(server, {
  cors: {
    origin: process.env['FRONTEND_URL'] || "https://lincor.repsdeltsgear.store",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env['PORT'] || 3004

// Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "ws:", "wss:"],
      fontSrc: ["'self'"],
      objectSrc: ["'none'"],
      mediaSrc: ["'self'"],
      frameSrc: ["'none'"],
    },
  },
}));

// CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.use(cors({
  origin: process.env['FRONTEND_URL'] || "https://lincor.repsdeltsgear.store",
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Compression middleware
app.use(compression());

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
app.use(express.static('public'));

// Request logging
app.use(requestLogger);

// Health check endpoint
app.get('/health', (_req, res) => {
  res.status(200).json({
    status: 'healthy',
    service: 'api-gateway',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/projects', projectRoutes);
app.use('/api/projects', manualLinksRoutes);
app.use('/api/projects', googleSheetsRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (_req, res) => {
  res.status(404).json({
    success: false,
    message: 'Route not found'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket Service
SocketService.initialize(io);

// Socket.IO –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('subscribe_project', (data) => {
    const { projectId } = data;
    socket.join(`project_${projectId}`);
    console.log(`Client ${socket.id} subscribed to project ${projectId}`);
  });

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞
  socket.on('unsubscribe_project', (data) => {
    const { projectId } = data;
    socket.leave(`project_${projectId}`);
    console.log(`Client ${socket.id} unsubscribed from project ${projectId}`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    console.log('üöÄ Starting API Gateway...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä Initializing database...');
    await initDatabase();
    console.log('‚úÖ Database initialized successfully');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    console.log('üî¥ Connecting to Redis...');
    await connectRedis();
    console.log('‚úÖ Redis connected successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Email Service
    console.log('üìß Initializing Email Service...');
    await EmailService.initialize();
    console.log('‚úÖ Email Service initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BullMQ Service (Client Mode)
    console.log('üîÑ Initializing BullMQ Service...');
    try {
      await BullMQService.initialize();
      console.log('‚úÖ BullMQ Service initialized successfully');
    } catch (error) {
      console.error('‚ùå Error initializing BullMQ Service:', error);
      console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ BullMQ Service –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    }

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.listen(PORT, () => {
      console.log(`üåê API Gateway running on port ${PORT}`);
      console.log(`üì° Socket.IO server ready for connections`);
      console.log(`üîó Health check: http://localhost:${PORT}/health`);
    });

    // Graceful shutdown
    process.on('SIGTERM', () => {
      console.log('üõë SIGTERM received, shutting down gracefully...');
      server.close(() => {
        console.log('‚úÖ API Gateway shut down successfully');
        process.exit(0);
      });
    });

    process.on('SIGINT', () => {
      console.log('üõë SIGINT received, shutting down gracefully...');
      server.close(() => {
        console.log('‚úÖ API Gateway shut down successfully');
        process.exit(0);
      });
    });

  } catch (error) {
    console.error('‚ùå Failed to start API Gateway:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
startServer();
