import { Queue, Worker, Job, QueueEvents } from 'bullmq';
// Redis connection –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ BullMQ
import { LinkAnalyzer } from './linkAnalyzer';
import { LinkAnalysisResult } from '../models/ManualLink';
import { ManualLinkModel } from '../models/ManualLink';
import { SocketService } from './socketService';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –∑–∞–¥–∞—á
export interface LinkAnalysisJobData {
  id: string;
  type: 'manual' | 'google_sheets';
  userId: string;
  projectId: string;
  linkId?: string;
  sheetId?: string;
  url: string;
  targetDomain: string;
  priority: number; // 1 = highest (enterprise), 4 = lowest (free)
  attempts?: number;
}

export interface AnalysisJobResult {
  success: boolean;
  result?: LinkAnalysisResult;
  error?: string;
  processedAt: Date;
}

export class BullMQService {
  private static linkAnalysisQueue: Queue<LinkAnalysisJobData> | null = null;
  private static linkAnalysisWorker: Worker<LinkAnalysisJobData, AnalysisJobResult> | null = null;
  private static queueEvents: QueueEvents | null = null;
  private static isInitialized = false;

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏
  private static readonly QUEUE_NAME = 'link-analysis';
  private static readonly MAX_WORKERS = parseInt(process.env['WORKER_CONCURRENT_LINKS'] || '5');
  private static readonly MAX_ATTEMPTS = 3;
  private static readonly BACKOFF_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BullMQ —Å–µ—Ä–≤–∏—Å–∞
   */
  static async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('üîÑ BullMQ Service already initialized');
      return;
    }

    try {
      console.log('üöÄ Initializing BullMQ Service...');

      // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å
      this.linkAnalysisQueue = new Queue<LinkAnalysisJobData>(this.QUEUE_NAME, {
        connection: {
          host: process.env['REDIS_HOST'] || 'localhost',
          port: parseInt(process.env['REDIS_PORT'] || '6379'),
          ...(process.env['REDIS_PASSWORD'] ? { password: process.env['REDIS_PASSWORD'] } : {}),
        },
        defaultJobOptions: {
          removeOnComplete: 100, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
          removeOnFail: 50, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á
          attempts: this.MAX_ATTEMPTS,
          backoff: {
            type: 'exponential',
            delay: this.BACKOFF_DELAY,
          },
        },
      });

      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä
      this.linkAnalysisWorker = new Worker<LinkAnalysisJobData, AnalysisJobResult>(
        this.QUEUE_NAME,
        this.processLinkAnalysisJob.bind(this),
        {
          connection: {
            host: process.env['REDIS_HOST'] || 'localhost',
            port: parseInt(process.env['REDIS_PORT'] || '6379'),
            ...(process.env['REDIS_PASSWORD'] ? { password: process.env['REDIS_PASSWORD'] } : {}),
          },
          concurrency: this.MAX_WORKERS,
        }
      );

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.queueEvents = new QueueEvents(this.QUEUE_NAME, {
        connection: {
          host: process.env['REDIS_HOST'] || 'localhost',
          port: parseInt(process.env['REDIS_PORT'] || '6379'),
          ...(process.env['REDIS_PASSWORD'] ? { password: process.env['REDIS_PASSWORD'] } : {}),
        },
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();

      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      await this.cleanupOldJobs();

      this.isInitialized = true;
      console.log('‚úÖ BullMQ Service initialized successfully');
      console.log(`üë∑ Max workers: ${this.MAX_WORKERS}`);
      console.log(`üîÑ Max attempts: ${this.MAX_ATTEMPTS}`);

    } catch (error) {
      console.error('‚ùå Failed to initialize BullMQ Service:', error);
      throw error;
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å
   */
  static async addLinkAnalysisJob(
    type: 'manual' | 'google_sheets',
    userId: string,
    projectId: string,
    url: string,
    targetDomain: string,
    linkId?: string,
    sheetId?: string
  ): Promise<void> {
    if (!this.linkAnalysisQueue) {
      throw new Error('BullMQ Service not initialized');
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const priority = await this.getUserPriority(userId);
      
      const jobData: LinkAnalysisJobData = {
        id: `${type}:${url}`,
        type,
        userId,
        projectId,
        ...(linkId && { linkId }),
        ...(sheetId && { sheetId }),
        url,
        targetDomain,
        priority,
        attempts: 0,
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      await this.linkAnalysisQueue.add(
        'analyze-link',
        jobData,
        {
          priority: priority, // BullMQ: 1 = highest, 4 = lowest
          jobId: jobData.id, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        }
      );

      console.log(`üì• Added job to BullMQ queue: ${jobData.id} (priority: ${priority})`);
      console.log(`üìä Queue size: ${await this.linkAnalysisQueue.getWaiting()}`);

    } catch (error) {
      console.error('‚ùå Failed to add job to BullMQ queue:', error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–∫–∏
   */
  private static async processLinkAnalysisJob(
    job: Job<LinkAnalysisJobData>
  ): Promise<AnalysisJobResult> {
    const { id, type, userId, projectId, linkId, sheetId, url, targetDomain } = job.data;

    console.log(`üéØ Worker processing job: ${id} (attempt ${job.attemptsMade + 1}/${job.opts.attempts})`);

    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
      const result = await LinkAnalyzer.analyzeLink(url, targetDomain);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
      if (type === 'manual' && linkId) {
        await ManualLinkModel.update(linkId, {
          status: result.status,
          response_code: result.responseCode,
          indexable: result.indexable,
          link_type: result.linkType,
          ...(result.canonicalUrl && { canonical_url: result.canonicalUrl }),
          load_time: result.loadTime,
          ...(result.fullATag && { full_a_tag: result.fullATag }),
          ...(result.nonIndexableReason && { non_indexable_reason: result.nonIndexableReason }),
          checked_at: new Date(),
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      await this.sendRealTimeUpdate({
        type,
        userId,
        projectId,
        ...(linkId && { linkId }),
        ...(sheetId && { sheetId }),
        result,
        success: true,
        processedAt: new Date(),
      });

      console.log(`‚úÖ Job completed successfully: ${id}`);

      return {
        success: true,
        result,
        processedAt: new Date(),
      };

    } catch (error) {
      console.error(`‚ùå Job failed: ${id}`, error);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await this.sendRealTimeUpdate({
        type,
        userId,
        projectId,
        ...(linkId && { linkId }),
        ...(sheetId && { sheetId }),
        result: null,
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        processedAt: new Date(),
      });

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        processedAt: new Date(),
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  private static async sendRealTimeUpdate(data: {
    type: 'manual' | 'google_sheets';
    userId: string;
    projectId: string;
    linkId?: string;
    sheetId?: string;
    result: LinkAnalysisResult | null;
    success: boolean;
    error?: string;
    processedAt: Date;
  }): Promise<void> {
    try {
      if (data.type === 'manual' && data.linkId) {
        SocketService.emitToProject(data.projectId, 'link_updated', {
          linkId: data.linkId,
          status: data.result?.status || 'Problem',
          responseCode: data.result?.responseCode || 0,
          indexable: data.result?.indexable || false,
          linkType: data.result?.linkType || 'not_found',
          canonicalUrl: data.result?.canonicalUrl,
          loadTime: data.result?.loadTime || 0,
          nonIndexableReason: data.result?.nonIndexableReason,
          checkedAt: data.processedAt,
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
      await this.checkProjectAnalysisCompletion(data.projectId, data.type);

    } catch (error) {
      console.error('‚ùå Failed to send real-time update:', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private static async checkProjectAnalysisCompletion(
    projectId: string,
    type: 'manual' | 'google_sheets'
  ): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
      const waitingJobs = await this.linkAnalysisQueue?.getWaiting();
      const activeJobs = await this.linkAnalysisQueue?.getActive();
      
      const projectJobs = [...(waitingJobs || []), ...(activeJobs || [])]
        .filter(job => job.data.projectId === projectId && job.data.type === type);

      if (projectJobs.length === 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ pending/checking —Å—Å—ã–ª–∫–∏ –≤ –ë–î
        const pendingLinks = await ManualLinkModel.findByProjectIdAndType(projectId, type);
        const hasPendingLinks = pendingLinks.some(link => 
          link.status === 'pending' || link.status === 'checking'
        );

        if (!hasPendingLinks) {
          console.log(`üéâ Analysis completed for project ${projectId} (${type})`);
          SocketService.emitToProject(projectId, 'analysis_completed', {
            projectId,
            type,
            total: pendingLinks.length,
            processed: pendingLinks.length,
          });
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to check project analysis completion:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async getUserPriority(_userId: string): Promise<number> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É
      return 1; // Enterprise –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } catch (error) {
      console.error('‚ùå Failed to get user priority:', error);
      return 4; // Free –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   */
  private static setupEventHandlers(): void {
    if (!this.queueEvents) return;

    this.queueEvents.on('completed', (jobId, _result) => {
      console.log(`‚úÖ Job completed: ${jobId}`);
    });

    this.queueEvents.on('failed', (jobId, err) => {
      console.error(`‚ùå Job failed: ${jobId}`, err);
    });

    this.queueEvents.on('stalled', (jobId) => {
      console.warn(`‚ö†Ô∏è Job stalled: ${jobId}`);
    });

    this.queueEvents.on('progress', (jobId, progress) => {
      console.log(`üìä Job progress: ${jobId} - ${progress}%`);
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
   */
  private static async cleanupOldJobs(): Promise<void> {
    if (!this.linkAnalysisQueue) return;

    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–¥–∞—á–∏
      await this.linkAnalysisQueue.clean(24 * 60 * 60 * 1000, 100, 'completed'); // 24 —á–∞—Å–∞
      await this.linkAnalysisQueue.clean(7 * 24 * 60 * 60 * 1000, 50, 'failed'); // 7 –¥–Ω–µ–π
      
      console.log('üßπ Cleaned up old jobs');
    } catch (error) {
      console.error('‚ùå Failed to cleanup old jobs:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
   */
  static async getQueueStats(): Promise<{
    waiting: number;
    active: number;
    completed: number;
    failed: number;
    delayed: number;
  }> {
    if (!this.linkAnalysisQueue) {
      throw new Error('BullMQ Service not initialized');
    }

    const [waiting, active, completed, failed, delayed] = await Promise.all([
      this.linkAnalysisQueue.getWaiting(),
      this.linkAnalysisQueue.getActive(),
      this.linkAnalysisQueue.getCompleted(),
      this.linkAnalysisQueue.getFailed(),
      this.linkAnalysisQueue.getDelayed(),
    ]);

    return {
      waiting: waiting.length,
      active: active.length,
      completed: completed.length,
      failed: failed.length,
      delayed: delayed.length,
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async getProjectQueueInfo(projectId: string): Promise<{
    waiting: number;
    active: number;
    jobs: Array<{
      id: string;
      type: string;
      url: string;
      priority: number;
      attempts: number;
    }>;
  }> {
    if (!this.linkAnalysisQueue) {
      throw new Error('BullMQ Service not initialized');
    }

    const [waiting, active] = await Promise.all([
      this.linkAnalysisQueue.getWaiting(),
      this.linkAnalysisQueue.getActive(),
    ]);

    const projectJobs = [...waiting, ...active]
      .filter(job => job.data.projectId === projectId)
      .map(job => ({
        id: job.id as string,
        type: job.data.type,
        url: job.data.url,
        priority: job.data.priority,
        attempts: job.attemptsMade,
      }));

    return {
      waiting: waiting.filter(job => job.data.projectId === projectId).length,
      active: active.filter(job => job.data.projectId === projectId).length,
      jobs: projectJobs,
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
   */
  static async shutdown(): Promise<void> {
    console.log('üõë Shutting down BullMQ Service...');

    try {
      if (this.linkAnalysisWorker) {
        await this.linkAnalysisWorker.close();
        this.linkAnalysisWorker = null;
      }

      if (this.linkAnalysisQueue) {
        await this.linkAnalysisQueue.close();
        this.linkAnalysisQueue = null;
      }

      if (this.queueEvents) {
        await this.queueEvents.close();
        this.queueEvents = null;
      }

      this.isInitialized = false;
      console.log('‚úÖ BullMQ Service shutdown complete');

    } catch (error) {
      console.error('‚ùå Error during BullMQ Service shutdown:', error);
    }
  }
}
