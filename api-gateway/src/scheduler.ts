import dotenv from 'dotenv';
import { initDatabase } from './config/database';
import { connectRedis } from './config/redis';
import { SchedulerService } from './services/schedulerService';
import { GoogleSheetsService } from './services/googleSheetsService';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '../../.env' });

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Scheduler
async function startScheduler() {
  try {
    console.log('‚è∞ Starting Google Sheets Scheduler...');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    console.log('üìä Initializing database...');
    await initDatabase();
    console.log('‚úÖ Database initialized successfully');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    console.log('üî¥ Connecting to Redis...');
    await connectRedis();
    console.log('‚úÖ Redis connected successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Service
    console.log('üìä Initializing Google Sheets Service...');
    await GoogleSheetsService.initialize();
    console.log('‚úÖ Google Sheets Service initialized successfully');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Scheduler Service
    console.log('‚è∞ Initializing Scheduler Service...');
    await SchedulerService.initialize();
    console.log('‚úÖ Scheduler Service initialized successfully');

    console.log('üöÄ Scheduler is ready to manage Google Sheets analysis!');
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    setInterval(() => {
      const status = SchedulerService.getStatus();
      console.log(`üìä Scheduler Status: ${status.activeTasks} active tasks`);
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    // Graceful shutdown
    process.on('SIGTERM', async () => {
      console.log('üõë SIGTERM received, shutting down scheduler gracefully...');
      await SchedulerService.shutdown();
      console.log('‚úÖ Scheduler shut down successfully');
      process.exit(0);
    });

    process.on('SIGINT', async () => {
      console.log('üõë SIGINT received, shutting down scheduler gracefully...');
      await SchedulerService.shutdown();
      console.log('‚úÖ Scheduler shut down successfully');
      process.exit(0);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      process.exit(1);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
      process.exit(1);
    });

  } catch (error) {
    console.error('‚ùå Failed to start Scheduler:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ Scheduler
startScheduler();
